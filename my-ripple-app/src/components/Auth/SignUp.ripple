import { track } from 'ripple';
import { supabase } from '../../utils/supabase';
import { validateEmail, validatePassword, handleApiError } from '../../utils/helpers';
import { useRouter } from '../../utils/router';

export component SignUp() {
  const router = useRouter();
  
  let email = track('');
  let password = track('');
  let confirmPassword = track('');
  let name = track('');
  let isLoading = track(false);
  let error = track<string | null>(null);
  let success = track(false);
  let emailError = track<string | null>(null);
  let passwordError = track<string | null>(null);
  let confirmPasswordError = track<string | null>(null);

  const validateForm = (): boolean => {
    @emailError = null;
    @passwordError = null;
    @confirmPasswordError = null;
    @error = null;

    if (!@email) {
      @emailError = 'Email is required';
      return false;
    }

    if (!validateEmail(@email)) {
      @emailError = 'Please enter a valid email address';
      return false;
    }

    if (!@password) {
      @passwordError = 'Password is required';
      return false;
    }

    const passwordValidation = validatePassword(@password);
    if (!passwordValidation.isValid) {
      @passwordError = passwordValidation.errors[0];
      return false;
    }

    if (!@confirmPassword) {
      @confirmPasswordError = 'Please confirm your password';
      return false;
    }

    if (@password !== @confirmPassword) {
      @confirmPasswordError = 'Passwords do not match';
      return false;
    }

    return true;
  };

  const handleSignUp = async (e: Event) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    @isLoading = true;
    @error = null;

    try {
      const { data, error: signUpError } = await supabase.auth.signUp({
        email: @email,
        password: @password,
        options: {
          data: {
            name: @name || undefined,
          },
        },
      });

      if (signUpError) {
        @error = handleApiError(signUpError);
        return;
      }

      if (data.user) {
        @success = true;
      }
    } catch (err) {
      @error = handleApiError(err);
    } finally {
      @isLoading = false;
    }
  };

  const goToSignIn = () => {
    router.navigate('/auth/signin');
  };

  if (@success) {
    <div class="auth-container">
      <div class="auth-card">
        <div class="auth-header">
          <div class="success-icon">{'âœ“'}</div>
          <h1 class="auth-title">{'Check your email'}</h1>
          <p class="auth-subtitle">
            {'We\'ve sent a confirmation link to '}
            <strong>{@email}</strong>
            {'. Please check your email and click the link to verify your account.'}
          </p>
        </div>

        <button class="btn btn-primary btn-full" onClick={goToSignIn}>
          {'Go to sign in'}
        </button>
      </div>
    </div>
  } else {
    <div class="auth-container">
      <div class="auth-card">
        <div class="auth-header">
          <h1 class="auth-title">{'Create your account'}</h1>
          <p class="auth-subtitle">{'Start organising your PDFs today.'}</p>
        </div>

        <form class="auth-form" onSubmit={handleSignUp}>
          if (@error) {
            <div class="alert alert-error">
              {@error}
            </div>
          }

          <div class="form-group">
            <label class="form-label" for="name">{'Name (optional)'}</label>
            <input
              id="name"
              type="text"
              class="form-input"
              placeholder="Your name"
              value={@name}
              onInput={(e: Event) => @name = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
          </div>

          <div class="form-group">
            <label class="form-label" for="email">{'Email'}</label>
            <input
              id="email"
              type="email"
              class={@emailError ? 'form-input error' : 'form-input'}
              placeholder="you@example.com"
              value={@email}
              onInput={(e: Event) => @email = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
            if (@emailError) {
              <span class="form-error">{@emailError}</span>
            }
          </div>

          <div class="form-group">
            <label class="form-label" for="password">{'Password'}</label>
            <input
              id="password"
              type="password"
              class={@passwordError ? 'form-input error' : 'form-input'}
              placeholder="Create a password"
              value={@password}
              onInput={(e: Event) => @password = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
            if (@passwordError) {
              <span class="form-error">{@passwordError}</span>
            }
            <span class="form-hint">
              {'Must be at least 8 characters with uppercase, lowercase, and number'}
            </span>
          </div>

          <div class="form-group">
            <label class="form-label" for="confirmPassword">{'Confirm password'}</label>
            <input
              id="confirmPassword"
              type="password"
              class={@confirmPasswordError ? 'form-input error' : 'form-input'}
              placeholder="Confirm your password"
              value={@confirmPassword}
              onInput={(e: Event) => @confirmPassword = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
            if (@confirmPasswordError) {
              <span class="form-error">{@confirmPasswordError}</span>
            }
          </div>

          <button
            type="submit"
            class="btn btn-primary btn-full"
            disabled={@isLoading}
          >
            if (@isLoading) {
              <span class="spinner"></span>
              {'Creating account...'}
            } else {
              {'Create account'}
            }
          </button>
        </form>

        <div class="auth-footer">
          <p class="auth-footer-text">
            {'Already have an account? '}
            <button class="link-button" onClick={goToSignIn}>
              {'Sign in'}
            </button>
          </p>
        </div>
      </div>
    </div>
  }

  <style>
    .auth-container {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: var(--spacing-lg);
      background-color: var(--color-bg-secondary);
    }

    .auth-card {
      width: 100%;
      max-width: 420px;
      background-color: var(--brand-white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      padding: var(--spacing-2xl);
    }

    .auth-header {
      text-align: center;
      margin-bottom: var(--spacing-xl);
    }

    .success-icon {
      width: 60px;
      height: 60px;
      margin: 0 auto var(--spacing-lg);
      background-color: var(--color-success);
      color: var(--brand-white);
      border-radius: var(--radius-full);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: var(--font-size-3xl);
      font-weight: var(--font-weight-bold);
    }

    .auth-title {
      font-size: var(--font-size-2xl);
      font-weight: var(--font-weight-bold);
      color: var(--color-text-primary);
      margin-bottom: var(--spacing-sm);
    }

    .auth-subtitle {
      font-size: var(--font-size-sm);
      color: var(--color-text-secondary);
      margin: 0;
      line-height: var(--line-height-relaxed);
    }

    .auth-form {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-lg);
    }

    .alert {
      padding: var(--spacing-md);
      border-radius: var(--radius-md);
      font-size: var(--font-size-sm);
    }

    .alert-error {
      background-color: #fee;
      color: var(--color-error);
      border: 1px solid var(--color-error);
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-xs);
    }

    .form-label {
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-medium);
      color: var(--color-text-primary);
    }

    .form-input {
      padding: var(--spacing-sm) var(--spacing-md);
      border: 1px solid var(--color-border-medium);
      border-radius: var(--radius-md);
      font-size: var(--font-size-base);
      transition: all var(--transition-fast);
    }

    .form-input:focus {
      outline: none;
      border-color: var(--brand-green);
      box-shadow: 0 0 0 3px rgba(35, 130, 135, 0.1);
    }

    .form-input.error {
      border-color: var(--color-error);
    }

    .form-input:disabled {
      background-color: var(--color-bg-tertiary);
      cursor: not-allowed;
    }

    .form-error {
      font-size: var(--font-size-xs);
      color: var(--color-error);
    }

    .form-hint {
      font-size: var(--font-size-xs);
      color: var(--color-text-tertiary);
    }

    .link-button {
      background: none;
      border: none;
      color: var(--brand-green);
      font-size: var(--font-size-sm);
      cursor: pointer;
      padding: 0;
      text-decoration: underline;
    }

    .link-button:hover {
      color: var(--color-link-hover);
    }

    .btn-full {
      width: 100%;
    }

    .auth-footer {
      margin-top: var(--spacing-xl);
      text-align: center;
    }

    .auth-footer-text {
      font-size: var(--font-size-sm);
      color: var(--color-text-secondary);
      margin: 0;
    }
  </style>
}


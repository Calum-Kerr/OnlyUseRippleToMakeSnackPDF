import { track } from 'ripple';
import { supabase } from '../../utils/supabase';
import { validatePassword, handleApiError } from '../../utils/helpers';
import { useRouter } from '../../utils/router';

export component ResetPassword() {
  const router = useRouter();
  
  let password = track('');
  let confirmPassword = track('');
  let isLoading = track(false);
  let error = track<string | null>(null);
  let success = track(false);
  let passwordError = track<string | null>(null);
  let confirmPasswordError = track<string | null>(null);

  const validateForm = (): boolean => {
    @passwordError = null;
    @confirmPasswordError = null;
    @error = null;

    if (!@password) {
      @passwordError = 'Password is required';
      return false;
    }

    const passwordValidation = validatePassword(@password);
    if (!passwordValidation.isValid) {
      @passwordError = passwordValidation.errors[0];
      return false;
    }

    if (!@confirmPassword) {
      @confirmPasswordError = 'Please confirm your password';
      return false;
    }

    if (@password !== @confirmPassword) {
      @confirmPasswordError = 'Passwords do not match';
      return false;
    }

    return true;
  };

  const handleResetPassword = async (e: Event) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    @isLoading = true;
    @error = null;

    try {
      const { error: updateError } = await supabase.auth.updateUser({
        password: @password,
      });

      if (updateError) {
        @error = handleApiError(updateError);
        return;
      }

      @success = true;
    } catch (err) {
      @error = handleApiError(err);
    } finally {
      @isLoading = false;
    }
  };

  const goToSignIn = () => {
    router.navigate('/auth/signin');
  };

  if (@success) {
    <div class="auth-container">
      <div class="auth-card">
        <div class="auth-header">
          <div class="success-icon">{'âœ“'}</div>
          <h1 class="auth-title">{'Password reset successful'}</h1>
          <p class="auth-subtitle">
            {'Your password has been successfully reset. You can now sign in with your new password.'}
          </p>
        </div>

        <button class="btn btn-primary btn-full" onClick={goToSignIn}>
          {'Go to sign in'}
        </button>
      </div>
    </div>
  } else {
    <div class="auth-container">
      <div class="auth-card">
        <div class="auth-header">
          <h1 class="auth-title">{'Set new password'}</h1>
          <p class="auth-subtitle">
            {'Please enter your new password below.'}
          </p>
        </div>

        <form class="auth-form" onSubmit={handleResetPassword}>
          if (@error) {
            <div class="alert alert-error">
              {@error}
            </div>
          }

          <div class="form-group">
            <label class="form-label" for="password">{'New password'}</label>
            <input
              id="password"
              type="password"
              class={@passwordError ? 'form-input error' : 'form-input'}
              placeholder="Create a new password"
              value={@password}
              onInput={(e: Event) => @password = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
            if (@passwordError) {
              <span class="form-error">{@passwordError}</span>
            }
            <span class="form-hint">
              {'Must be at least 8 characters with uppercase, lowercase, and number'}
            </span>
          </div>

          <div class="form-group">
            <label class="form-label" for="confirmPassword">{'Confirm new password'}</label>
            <input
              id="confirmPassword"
              type="password"
              class={@confirmPasswordError ? 'form-input error' : 'form-input'}
              placeholder="Confirm your new password"
              value={@confirmPassword}
              onInput={(e: Event) => @confirmPassword = (e.target as HTMLInputElement).value}
              disabled={@isLoading}
            />
            if (@confirmPasswordError) {
              <span class="form-error">{@confirmPasswordError}</span>
            }
          </div>

          <button
            type="submit"
            class="btn btn-primary btn-full"
            disabled={@isLoading}
          >
            if (@isLoading) {
              <span class="spinner"></span>
              {'Resetting password...'}
            } else {
              {'Reset password'}
            }
          </button>
        </form>
      </div>
    </div>
  }

  <style>
    .auth-container {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: var(--spacing-lg);
      background-color: var(--color-bg-secondary);
    }

    .auth-card {
      width: 100%;
      max-width: 420px;
      background-color: var(--brand-white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      padding: var(--spacing-2xl);
    }

    .auth-header {
      text-align: center;
      margin-bottom: var(--spacing-xl);
    }

    .success-icon {
      width: 60px;
      height: 60px;
      margin: 0 auto var(--spacing-lg);
      background-color: var(--color-success);
      color: var(--brand-white);
      border-radius: var(--radius-full);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: var(--font-size-3xl);
      font-weight: var(--font-weight-bold);
    }

    .auth-title {
      font-size: var(--font-size-2xl);
      font-weight: var(--font-weight-bold);
      color: var(--color-text-primary);
      margin-bottom: var(--spacing-sm);
    }

    .auth-subtitle {
      font-size: var(--font-size-sm);
      color: var(--color-text-secondary);
      margin: 0;
      line-height: var(--line-height-relaxed);
    }

    .auth-form {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-lg);
    }

    .alert {
      padding: var(--spacing-md);
      border-radius: var(--radius-md);
      font-size: var(--font-size-sm);
    }

    .alert-error {
      background-color: #fee;
      color: var(--color-error);
      border: 1px solid var(--color-error);
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-xs);
    }

    .form-label {
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-medium);
      color: var(--color-text-primary);
    }

    .form-input {
      padding: var(--spacing-sm) var(--spacing-md);
      border: 1px solid var(--color-border-medium);
      border-radius: var(--radius-md);
      font-size: var(--font-size-base);
      transition: all var(--transition-fast);
    }

    .form-input:focus {
      outline: none;
      border-color: var(--brand-green);
      box-shadow: 0 0 0 3px rgba(35, 130, 135, 0.1);
    }

    .form-input.error {
      border-color: var(--color-error);
    }

    .form-input:disabled {
      background-color: var(--color-bg-tertiary);
      cursor: not-allowed;
    }

    .form-error {
      font-size: var(--font-size-xs);
      color: var(--color-error);
    }

    .form-hint {
      font-size: var(--font-size-xs);
      color: var(--color-text-tertiary);
    }

    .btn-full {
      width: 100%;
    }
  </style>
}


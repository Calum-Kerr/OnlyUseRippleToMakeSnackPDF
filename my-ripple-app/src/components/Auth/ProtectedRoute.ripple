import { effect } from 'ripple';
import type { Component } from 'ripple';
import { useAuth } from '../../utils/auth.context';
import { useRouter } from '../../utils/router';

export component ProtectedRoute(props: { children: Component }) {
  const auth = useAuth();
  const router = useRouter();

  // Check authentication and redirect if needed
  effect(() => {
    const isLoading = @auth.isLoading;
    const isAuthenticated = @auth.isAuthenticated;

    if (!isLoading && !isAuthenticated) {
      // Redirect to sign in if not authenticated
      router.navigate('/auth/signin');
    }
  });

  if (@auth.isLoading) {
    <div class="protected-route-loading">
      <div class="loading-container">
        <div class="spinner-large"></div>
        <p class="loading-text">{'Loading...'}</p>
      </div>
    </div>
  } else if (@auth.isAuthenticated) {
    <props.children />
  } else {
    <div class="protected-route-loading">
      <div class="loading-container">
        <p class="loading-text">{'Redirecting to sign in...'}</p>
      </div>
    </div>
  }

  <style>
    .protected-route-loading {
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: var(--color-bg-secondary);
    }

    .loading-container {
      text-align: center;
    }

    .spinner-large {
      display: inline-block;
      width: 3rem;
      height: 3rem;
      border: 3px solid var(--color-border-light);
      border-top-color: var(--brand-green);
      border-radius: var(--radius-full);
      animation: spin 0.8s linear infinite;
      margin-bottom: var(--spacing-md);
    }

    .loading-text {
      font-size: var(--font-size-base);
      color: var(--color-text-secondary);
      margin: 0;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
  </style>
}

